#!/bin/sh
# Author: Fox_exe
# Skype: Fox_experience

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

echo "# Loading, please wait..."

# ========= FUNC =========
start_ssh() {
	echo "# Starting a network..."
	load_mac.sh
	ifup -a
	udhcpc -t 5 -q -s /bin/simple.script -p /run/udhcpc.pid
	dropbear -B -p 2222 -b /etc/dropbear/banner.txt -P /run/dropbear.pid 2>&1 >/dev/null
}


run_shell() {
	echo "# Runing a shell..."

	# Run UART shell
	exec 0</dev/console
	exec 1>/dev/console
	exec 2>/dev/console
	exec setsid cttyhack ash
}

ask_for_stop() {
	i=3
	echo -n " Press any key or reset key to stop and run shell..."
	while [ $i -ge 1 ]; do
		read -s -n1 -t1 ANYKEY
		if [ `cat /sys/class/gpio/gpio50/value` = 1 ] || ! [ -z $ANYKEY ]; then
			start_ssh
			run_shell
		fi
		echo -n $i".."
		let i=$i-1
	done
	echo -e "\n"
}

# ========= CODE =========

echo "# Mounting filesystems..."
# hide error messages, if kernel already mount /dev
mount -t devtmpfs -o size=10M,mode=0755 udev /dev > /dev/null 2>&1
mkdir -p /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts > /dev/null 2>&1
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
mount -t proc -o nodev,noexec,nosuid proc /proc

# Reset button init for WDMC Mirror Gen2 / Ex2 Ultra
echo 50 > /sys/class/gpio/export
echo 1 > /sys/class/gpio/gpio50/active_low

# Adding mdev support
echo /sbin/mdev >/proc/sys/kernel/hotplug
mdev -s

# Initial Raid
echo 'DEVICE /dev/sd??*' >/etc/mdadm.conf
mdadm -Eb /dev/sd??* >>/etc/mdadm.conf
mdadm -As --force
wait
mdadm --assemble --scan

# Init LVM
lvm vgscan --mknodes
lvm vgchange -a ly
lvm vgscan --mknodes
wait

ask_for_stop

#check for LUKS-devices
if
	blkid | grep -q crypto
then
	# Look for key on usb / hdd
	mkdir -p /mnt/usb
	mount -o rw $(findfs LABEL=key) /mnt/usb
	wait
	if [ -e /mnt/usb/key.luks ]; then
		cp /mnt/usb/key.luks /decrypt_key
		umount /mnt/usb
		/sbin/decrypt.sh
		#if $?; then
		#	echo "Decrypt failed."
		#	run_shell
		#fi
	fi

	echo -e "\n Waiting for device decryption"

	# wait until the device exists and is decrypted
	while ! [ -e /dev/mapper/rootfs ]; do
		sleep 1
	done
fi

# If not encrypted
mount -o rw $(findfs LABEL=rootfs) /mnt/root 2>&1 >/dev/null
[ $? -ne 0 ] && mount -o rw $(findfs TYPE=ext3) /mnt/root 2>&1 >/dev/null
[ $? -ne 0 ] && mount -o rw $(findfs TYPE=ext4) /mnt/root 2>&1 >/dev/null
[ $? -ne 0 ] && echo "# Something wrong - Rootfs not found!"

if [ -h /mnt/root/sbin/init -o -e /mnt/root/sbin/init ]; then
	echo "Switching to normal OS..."
	wait
	cp /sbin/load_mac.sh /mnt/root/sbin/load_mac.sh

	# Kill daemons if still running
	[ -r "/run/dropbear.pid" ] && kill -9 $(cat /run/dropbear.pid)
	[ -r "/run/udhcpc.pid" ]   && kill -9 $(cat /run/udhcpc.pid)

	umount /sys 2> /dev/null
	umount /proc 2> /dev/null
	umount /dev/pts 2> /dev/null
	umount /dev 2> /dev/null
	exec switch_root -c /dev/console $ROOTFS /sbin/init || run_shell
fi

# Actually this wont run normally...
run_shell
